find_package(Git)
if(GIT_EXECUTABLE AND IS_DIRECTORY ${CMAKE_SOURCE_DIR}/.git)
	execute_process(
		COMMAND ${GIT_EXECUTABLE} rev-list --count HEAD
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
		OUTPUT_VARIABLE GIT_REV_COUNT
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)

	execute_process(
		COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
		OUTPUT_VARIABLE GIT_SHORT_HASH
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)

	execute_process(
		COMMAND ${GIT_EXECUTABLE} log -1 --format=%ad --date=short
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
		OUTPUT_VARIABLE GIT_LAST_COMMIT_DATE
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)

	execute_process(
		COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
		OUTPUT_VARIABLE GIT_BRANCH_NAME
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)

	execute_process(
		COMMAND ${GIT_EXECUTABLE} describe --tags --exact-match HEAD
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
		RESULT_VARIABLE GIT_NO_TAG
		OUTPUT_VARIABLE GIT_TAG_NAME
		ERROR_QUIET
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)

	if(${GIT_NO_TAG})
		string(REPLACE "-" ";" GIT_LAST_COMMIT_DATE_LIST ${GIT_LAST_COMMIT_DATE})
		list(GET GIT_LAST_COMMIT_DATE_LIST 0 PACKAGE_MAJOR_VERSION)
		list(GET GIT_LAST_COMMIT_DATE_LIST 1 PACKAGE_MINOR_VERSION)
		set(PACKAGE_PATCH_VERSION "r${GIT_REV_COUNT}-${GIT_SHORT_HASH}")
	endif()
else()
	set(GIT_NO_TAG TRUE)
	string(TIMESTAMP PACKAGE_MAJOR_VERSION "%Y")
	string(TIMESTAMP PACKAGE_MINOR_VERSION "%m")
	string(TIMESTAMP PACKAGE_PATCH_VERSION "%d")
endif()

if(NOT GIT_EXECUTABLE OR GIT_NO_TAG)
	set(PACKAGE_VERSION "${PACKAGE_MAJOR_VERSION}.${PACKAGE_MINOR_VERSION}.${PACKAGE_PATCH_VERSION}")
else()
	set(PACKAGE_VERSION "${GIT_TAG_NAME}")
endif()
message(STATUS "${PACKAGE_NAME} version: ${PACKAGE_VERSION}")

mark_as_advanced(PACKAGE_MAJOR_VERSION PACKAGE_MINOR_VERSION PACKAGE_PATCH_VERSION PACKAGE_VERSION)
